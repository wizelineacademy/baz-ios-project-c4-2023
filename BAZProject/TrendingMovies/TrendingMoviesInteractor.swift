//
//  TrendingMoviesInteractor.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 19/04/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

extension TrendingMoviesInteractorProtocol{
    ///Metodo que regresa la url necesaria para consumir el Api de MovieDB
    ///- Returns: Devuelve una URLRequest
    func getMoviesUrlRequest() -> URLRequest?{
        guard let url = URL(string: ApiConstans.baseURL + ApiConstans.trending + ApiConstans.apiKey) else { return nil }
        return URLRequest(url: url)
    }
    ///Metodo que regresa la url necesaria para consumir el Api de MovieDB de acuerdo a un criterio de busqueda
    ///- Parameters:
    /// - searchString: Criterio de busqueda
    ///- Returns: Devuelve una URLRequest
    func getSearchMoviewUrlRequest(searchString : String) -> URLRequest?{
        let stringToSearch = "&query=\(searchString.replacingOccurrences(of: " ", with: "") )"
        guard let url = URL(string: ApiConstans.baseURL + ApiConstans.search + ApiConstans.apiKey + stringToSearch) else { return nil}
        return URLRequest(url: url)
    }
}

final class TrendingMoviesInteractor: TrendingMoviesInteractorProtocol {
    /// Intancia del presenter  del modulo VIPER Trending Movies
    weak var presenter: TrendingMoviesPresenterProtocol?
    /// Intancia del protocolo GenericAPIProtocol para las llamadas al Api de MovieDB
    let movieAPI: GenericAPIProtocol
    /**
     Inicializador del Iteractor del modulo VIPER de Trending Movies
     - Parameters:
        - MovieApi: Initancia del protocolo GenericAPIProtocol para las llamadas al Api de MovieDB
     - Returns: Devuelve el Iteractor del modulo VIPER Trending Movies
     */
    init(movieAPI: GenericAPIProtocol) {
        self.movieAPI = movieAPI
    }
    ///Metodo que cosume la api de MovieDB y devueve al presenter las Movies
    func getMovies() {
        guard let urlRequest = getMoviesUrlRequest() else { return }
        movieAPI.fetch(request: urlRequest) {[weak self] (result: Result<MovieResult?, Error>) in
            switch result {
            case .failure(let fail):
                print(fail)
            case .success(let response):
                self?.presenter?.setMovies(result: response?.results ?? [])
            }
        }
    }
    ///Metodo que cosume la api de MovieDB y devueve al presenter las Movies de acuerdo a criterio de busqueda
    func findMovies(for string: String) {
        guard let request = getSearchMoviewUrlRequest(searchString: string) else { return }
        movieAPI.fetch(request: request) {(result: Result<MovieResult?, Error>) in
            switch result {
            case .failure(let fail):
                print(fail)
            case .success(let response):
                self.presenter?.loadFindMovies(movies: response?.results ?? [])
            }
        }
    }
    
}
