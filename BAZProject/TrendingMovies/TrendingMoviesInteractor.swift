//
//  TrendingMoviesInteractor.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 19/04/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class TrendingMoviesInteractor: TrendingMoviesInteractorProtocol {
    
    weak var presenter: TrendingMoviesPresenterProtocol?
    let movieAPI: GenericAPI
    
    
    init(movieAPI: GenericAPI) {
        self.movieAPI = movieAPI
    }
    
    func getMovies() {
        guard let urlRequest = getMoviesUrlRequest() else { return }
        
        movieAPI.fetch(request: urlRequest) {[weak self] (result: Result<MovieResult?, Error>) in
            switch result {
            case .failure(let fail):
                print(fail)
            case .success(let response):
                guard let movies = response?.results else {
                    print(ApiError.defaultError)
                    return
                }
                self?.presenter?.setMovies(result: movies)
            }
        }
    }
    
    func findMovies(for string: String, completion: @escaping ([ListMovieProtocol]) -> ()) {
        if !string.isEmpty && string.count > 3{
            guard let request = getSearchMoviewUrlRequest(searchString: string) else { return }
            movieAPI.fetch(request: request) {(result: Result<MovieResult?, Error>) in
                switch result {
                case .failure(let fail):
                    print(fail)
                case .success(let response):
                    guard let movies = response?.results else {
                        print(ApiError.defaultError)
                        return
                    }
                    completion(movies)
                }
            }
        }
    }

    func getMoviesUrlRequest() -> URLRequest?{
        return URLRequest(url: URL(string: ApiConstans.baseURL + ApiConstans.trending + ApiConstans.apiKey)!)
    }
    
    func getSearchMoviewUrlRequest(searchString : String) -> URLRequest?{
        let stringToSearch = "&query=\(searchString.addingPercentEncoding(withAllowedCharacters: .whitespacesAndNewlines) ?? "")"
        guard let url = URL(string: ApiConstans.baseURL + ApiConstans.search + ApiConstans.apiKey + stringToSearch) else { return nil}
        return URLRequest(url: url)
    }
    
    func getRemotImage(from stringURL: String, completion: @escaping (UIImage?) -> ()) {
        guard let url = URL(string: ApiConstans.baseUrlImage + stringURL) else { return }
        UIImage().loadFrom(url: url, completion: completion)
    }
    
    
}
