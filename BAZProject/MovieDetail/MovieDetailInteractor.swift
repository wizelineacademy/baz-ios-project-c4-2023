//
//  MoviewDetailInteractor.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 03/05/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

final class MovieDetailInteractor: MoviewDetailInteractorProtocol {
    
    /// Intancia del presenter  del modulo VIPER MovieDetail
    weak var presenter: MoviewDetailPresenterProtocol?
    
    /// Intancia del protocolo GenericAPIProtocol para las llamadas al Api de MovieDB
    let movieAPI: GenericAPIProtocol
    
    /// Intancia de UserDefaultManagerProtocol
    let userDefault: UserDefaultManagerProtocol
    
    /**
     Inicializador del Iteractor del modulo VIPER de Trending Movies
     - Parameters:
        - MovieApi: Initancia del protocolo GenericAPIProtocol para las llamadas al Api de MovieDB
        - userDefault: Intancia de UserDefaultManagerProtocol
     - Returns: Devuelve el Iteractor del modulo VIPER Trending Movies
     */
    init(movieAPI: GenericAPIProtocol, userDefault: UserDefaultManagerProtocol) {
        self.movieAPI = movieAPI
        self.userDefault = userDefault
    }
    
    ///Metodo que cosume la api de MovieDB y devueve al presenter las Movies
    /// - Parameters:
    ///     - id:  Idetificador de una Movie
    func getSimilar(_ urlRequest: URLRequest) {
        movieAPI.fetch(movieURLRequest: urlRequest, completionHandler: handlerGetSimilarMovieResult(result:))
    }
    
    ///Metodo que cosume la api de MovieDB y devueve al presenter las Movies
    /// - Parameters:
    ///     - id:  Idetificador de una Movie
    func getRecomendation(_ urlRequest: URLRequest) {
        movieAPI.fetch(movieURLRequest: urlRequest, completionHandler: handlerGetRecomendMovieResult(result:))
    }
    
    ///Metodo que cosume la api de MovieDB y devueve al presenter el Reparto
    /// - Parameters:
    ///     - id:  Idetificador de una Movie
    func getCast(_ urlRequest: URLRequest) {
        movieAPI.fetch(movieURLRequest: urlRequest, completionHandler: handlerGetCastResult(result:))
    }
    
    ///Metodo que cosume la api de MovieDB y devueve al presenter  las reseñas
    /// - Parameters:
    ///     - id:  Idetificador de una Movie
    func getReviews(_ urlRequest: URLRequest) {
        movieAPI.fetch(movieURLRequest: urlRequest, completionHandler: handlerGetReviewResult(result:))
    }
    
    ///Metodo que elimina de un userdefault una pelicula
    /// - Parameters:
    ///     - id:  Idetificador de una Movie
    func deleteFavorite(_ id: Int) {
        userDefault.deleteFavorite(id)
        presenter?.isFavorite()
    }
    
    ///Metodo que guarda de un userdefault una pelicula
    /// - Parameters:
    ///     - id:  Idetificador de una Movie
    func saveFavorite(_ movie: ListMovieProtocol) {
        userDefault.saveFavorite(movie: movie as! Movie)
        presenter?.isFavorite()
    }
    
    func handlerGetSimilarMovieResult(result: Result<MovieResult?, Error>) {
        switch result {
        case .failure(let fail):
            print(fail)
        case .success(let response):
            presenter?.setSimilarMovies(movies: response?.results ?? [])
        }
    }
    
    func handlerGetRecomendMovieResult(result: Result<MovieResult?, Error>) {
        switch result {
        case .failure(let fail):
            print(fail)
        case .success(let response):
            presenter?.setRecomendedMovies(movies: response?.results ?? [])
        }
    }
    
    func handlerGetCastResult(result: Result<CastResult?, Error>) {
        switch result {
        case .failure(let fail):
            print(fail)
        case .success(let response):
            self.presenter?.setCast(response?.cast ?? [])
        }
    }
    
    func handlerGetReviewResult(result: Result<ReviewResult?, Error>) {
        switch result {
        case .failure(let fail):
            print(fail)
        case .success(let response):
            self.presenter?.setReviews(response?.results ?? [])
        }
    }
    
}
