//
//  MoviewDetailViewController.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 03/05/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

final class MoviewDetailViewController: UIViewController, MoviewDetailViewProtocol {
    var movie: ListMovieProtocol?
    var presenter: MoviewDetailPresenterProtocol?
    var cast: [Cast] = []{
        didSet{
            collectionCast.reloadData()
        }
    }
    var similarMovies: [ListMovieProtocol] = []{
        didSet{
            collectionSimilar.reloadData()
        }
    }
    var recomendedMovies: [ListMovieProtocol] = []{
        didSet{
            collectionRecomendation.reloadData()
        }
    }
    
    @IBOutlet weak var imgPoster: UIImageView!
    @IBOutlet weak var lblTitle: UILabel!
    @IBOutlet weak var lblDescription: UILabel!
    @IBOutlet weak var btnLike: UIButton!
    @IBOutlet weak var collectionCast: UICollectionView!{
        didSet{
            configureCastCollectionView(collectionCast)
        }
    }
    @IBOutlet weak var collectionRecomendation: UICollectionView!{
        didSet{
            configureMovieCollectionView(collectionRecomendation)
        }
    }
    @IBOutlet weak var collectionSimilar: UICollectionView!{
        didSet{
            configureMovieCollectionView(collectionSimilar)
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setUpInitialInfo()
        presenter?.getSimilar(String(movie?.id ?? 0))
        presenter?.getRecomendation(String(movie?.id ?? 0))
        presenter?.getCast(String(movie?.id ?? 0))
        presenter?.findFavoriteMovie(movie?.id ?? 0)
    }
    
    private func configureMovieCollectionView(_ collection: UICollectionView){
        collection.dataSource = self
        collection.register(UINib(nibName: MovieCollectionViewCell.idetifier, bundle: nil), forCellWithReuseIdentifier: MovieCollectionViewCell.idetifier)
    }
    
    private func configureCastCollectionView(_ collection: UICollectionView){
        collection.dataSource = self
        collection.register(UINib(nibName: CastCollectionViewCell.idetifier, bundle: nil), forCellWithReuseIdentifier: CastCollectionViewCell.idetifier)
    }
    
    private func setUpInitialInfo(){
        self.title = movie?.title
        lblTitle.text = movie?.title
        lblDescription.text = movie?.overview
        guard let url = movie?.urlBackdropImage else { return }
        imgPoster.loadRemoteImage(url: url)
    }

    @IBAction func goToReviws(_ sender: Any) {
        
    }
    
    @IBAction func like(_ sender: Any) {
        guard let movie = self.movie else { return }
        presenter?.favoriteMovie(movie)
    }
    
}

extension MoviewDetailViewController{
    
    func setSimilarMovies(movies: [ListMovieProtocol]) {
        self.similarMovies = movies
    }
    
    func setRecomendedMovies(movies: [ListMovieProtocol]) {
        self.recomendedMovies = movies
    }
    
    func setCast(_ cast: [Cast]) {
        self.cast = cast
    }
    
    func setFavorite(_ isFavorite: Bool) {
        btnLike.tintColor = isFavorite ? .systemPink : .systemGray
    }
    
}

extension MoviewDetailViewController: UICollectionViewDataSource{
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == collectionCast{
            return cast.count
        }else {
            return collectionView == collectionRecomendation ? recomendedMovies.count : similarMovies.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == collectionCast{
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CastCollectionViewCell.idetifier, for: indexPath) as? CastCollectionViewCell else { return UICollectionViewCell() }
            let actor = cast[indexPath.row]
            guard let url = actor.urlProfilePath else { return UICollectionViewCell() }
            cell.imgActor.loadRemoteImage(url: url)
            cell.lblName.text = actor.name
            return cell
        }else{
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: MovieCollectionViewCell.idetifier, for: indexPath) as? MovieCollectionViewCell else { return UICollectionViewCell() }
            let movie =  collectionView == collectionRecomendation ? recomendedMovies[indexPath.row] : similarMovies[indexPath.row]
            guard let url = movie.urlImage else { return UICollectionViewCell() }
            
            cell.imgPoster.loadRemoteImage(url: url)
            cell.lblTitle.text = movie.title
            
            return cell
        }
    }
}

extension MoviewDetailViewController: UICollectionViewDelegateFlowLayout {
    
    
}
