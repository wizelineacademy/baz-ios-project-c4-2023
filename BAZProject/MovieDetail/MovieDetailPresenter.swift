//
//  MoviewDetailPresenter.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 03/05/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

final class MovieDetailPresenter: MoviewDetailPresenterProtocol {
    /// Intancia del View  del modulo VIPER MovieDetail
    weak private var view: MoviewDetailViewProtocol?
    /// Intancia del Interactor  del modulo VIPER MovieDetail
    var interactor: MoviewDetailInteractorProtocol?
    /// Identidicador de la pelicula
    var movie: ListMovieProtocol
    /// Intancia de UserDefaultManagerProtocol
    var userDefaultManager: UserDefaultManagerProtocol
    /// Intancia del Router  del modulo VIPER MovieDetail
    private let router: MoviewDetailWireframeProtocol
    /// Inicializador del Presenter del modulo VIPER de MovieDetail
    /// - parameters:
    ///    - interface: View del modulo ViPER
    ///    - interactor: Interactor del modulo ViPER
    ///    - router: Router del modulo VIPER
    /// - returns:
    ///   Devuelve el Presenter del modulo VIPER MovieDetail
    init(movie: ListMovieProtocol,interface: MoviewDetailViewProtocol, interactor: MoviewDetailInteractorProtocol?, router: MoviewDetailWireframeProtocol, userDefaultManager: UserDefaultManagerProtocol = UserDefaultManager()) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.movie = movie
        self.userDefaultManager = userDefaultManager
    }
    
    ///Funcion que llama al interactor para obtener las las peliculas similares del la api de MovieDB
    func getSimilar() {
        guard let urlRequest = MovieDetailInfo.similar(movie.idString).urlRequest else { return }
        interactor?.getSimilar(urlRequest)
    }
    
    ///Funcion que llama al interactor para obtener las las peliculas recomendadas del la api de MovieDB
    func getRecomendation() {
        guard let urlRequest = MovieDetailInfo.recomended(movie.idString).urlRequest else { return }
        interactor?.getRecomendation(urlRequest)
    }
    
    ///Funcion que llama al interactor para obtener el elenco de una pelicula del  api de MovieDB
    func getCast() {
        guard let urlRequest = MovieDetailInfo.credits(movie.idString).urlRequest else { return }
        interactor?.getCast(urlRequest)
    }
    
    ///Funcion que llama al interactor para obtener las Reseñas de una pelicila  del  api de MovieDB
    func getReviews() {
        guard let urlRequest = MovieDetailInfo.reviews(movie.idString).urlRequest else { return }
        interactor?.getReviews(urlRequest)
    }
    
    ///Funcion que llama al interactor para actualizar el estatus de los favoritos de  peliculas del la api de MovieDB
    func favoriteMovie() {
        if userDefaultManager.isFavorite(id: movie.id){
            interactor?.deleteFavorite(movie.id)
        }else{
            interactor?.saveFavorite(movie)
        }
    }
    
    ///Funcion que llama al interactor para obtener la  peliculas de los favoritos del usuario
    func isFavorite() {
        view?.setFavorite(userDefaultManager.isFavorite(id: movie.id))
    }
    
    ///Funcion que llama al view  para setear  las las peliculas similares del la api de MovieDB
    func setSimilarMovies(movies: [ListMovieProtocol]) {
        view?.setSimilarMovies(movies: movies)
    }
    
    ///Funcion que llama al view  para setear  las las peliculas  recomendadas del la api de MovieDB
    func setRecomendedMovies(movies: [ListMovieProtocol]) {
        view?.setRecomendedMovies(movies: movies)
    }
    
    ///Funcion que llama al view  para setear  el reparto de una pelicula
    func setCast(_ cast: [Cast]) {
        view?.setCast(cast)
    }
    
    ///Funcion que llama al view  para setear  las reseñas en el modelo para ir a la panttalla de las reseñas
    func setReviews(_ reviews: [Review]) {
        view?.setReviews(reviews)
    }
    
    ///Funcion que llama al router para lanzar la pantalla de las reseñas
    func sendToReviews(reviews: [Review]) {
        router.sendToReviews(reviews: reviews)
    }
}
