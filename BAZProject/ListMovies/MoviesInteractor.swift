//
//  TrendingMoviesInteractor.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 19/04/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

final class MoviesInteractor: MoviesInteractorProtocol {
    /// Intancia del presenter  del modulo VIPER Trending Movies
    weak var presenter: MoviesPresenterProtocol?
    /// Intancia del protocolo GenericAPIProtocol para las llamadas al Api de MovieDB
    var movieAPI: GenericAPIProtocol
    /**
     Inicializador del Iteractor del modulo VIPER de Trending Movies
     - Parameters:
        - MovieApi: Initancia del protocolo GenericAPIProtocol para las llamadas al Api de MovieDB
     - Returns: Devuelve el Iteractor del modulo VIPER Trending Movies
     */
    init(movieAPI: GenericAPIProtocol) {
        self.movieAPI = movieAPI
    }
    ///Metodo que cosume la api de MovieDB y devueve al presenter las Movies
    func getMovies(urlRequest: URLRequest) {
        movieAPI.fetch(movieURLRequest: urlRequest) { [weak self] (result: Result<MovieResult?, Error>) in
            switch result {
            case .failure(let fail):
                print(fail)
            case .success(let response):
                self?.presenter?.setMovies(result: response?.results ?? [])
            }
        }
    }
    ///Metodo que cosume la api de MovieDB y devueve al presenter las Movies de acuerdo a criterio de busqueda
    func findMovies(for string: String) {
        guard let request = MovieDetailInfo.search(string).urlRequest else { return }
        movieAPI.fetch(movieURLRequest: request){(result: Result<MovieResult?, Error>) in
            switch result {
            case .failure(let fail):
                print(fail)
            case .success(let response):
                self.presenter?.loadFindMovies(movies: response?.results ?? [])
            }
        }
    }
    
}
