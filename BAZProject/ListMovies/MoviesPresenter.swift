//
//  TrendingMoviesPresenter.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 19/04/23.
//  Copyright © 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
/// Presenter del modulo VIPER Trending Movies
final class MoviesPresenter: MoviesPresenterProtocol {
    /// Intancia del View  del modulo VIPER Trending Movies
    weak private var view: MoviesViewProtocol?
    /// Intancia del Interactor  del modulo VIPER Trending Movies
    var interactor: MoviesInteractorProtocol?
    /// Intancia del Router  del modulo VIPER Trending Movies
    private let router: MoviesWireframeProtocol
    /// Inicializador del Presenter del modulo VIPER de Trending Movies
    /// - parameters:
    ///    - interface: View del modulo ViPER
    ///    - interactor: Interactor del modulo ViPER
    ///    - router: Router del modulo VIPER
    /// - returns:
    ///   Devuelve el Presenter del modulo VIPER Trending Movies
    init(interface: MoviesViewProtocol, interactor: MoviesInteractorProtocol?, router: MoviesWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    ///Funcion que llama al interactor para obtener las las peliculas del la api de MovieDB
    func getMovies() {
        guard let type  = view?.type as? MovieCategories else { return }
        if type == .favorites{
            interactor?.getLocalMovies()
        }else{
            guard let urlRequest  = type.urlRequest else { return }
            interactor?.getMovies(urlRequest: urlRequest)
        }
    }
    ///Funcion que llama al view  para setear  las las peliculas del la api de MovieDB
    func setMovies(result: [ListMovieProtocol]) {
        view?.loadData(movies: result)
    }
    ///Funcion que llama al interactor para obtener las las peliculas deacuerdo a un criterio de busqueda del la api de MovieDB
    func findMovies(for string: String?) {
        if cleanStringForSearch(string).count > 3{
            interactor?.findMovies(for: cleanStringForSearch(string))
        }
        
    }
    /// Limpia el texto a buscar
    /// - parameters:
    ///    - string: String
    func cleanStringForSearch(_ string: String?) -> String {
        return  string ?? ""
    }
    /// Inicializa los valores para desplegar la busqueda en ResultsTableController
    /// - parameters:
    ///    - movies: Movies
    func loadFindMovies(movies: [ListMovieProtocol]) {
        view?.resultsTableController?.filteredProducts = movies
    }
    
    func sendToDetail(movie: Movie) {
        router.sendToDetail(with: movie)
    }
    
}
