//
//  TrendingMoviesViewController.swift
//  BAZProject
//
//  Created Octavio Labastida Luna on 19/04/23.
//  Copyright Â© 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Juanpe CatalÃ¡n @JuanpeCMiOS
//

import UIKit

///ViewController que contiene la vista del Modulo Viper de TrendigMovies
/// - Parameters:
///    - presenter: Intancia del Presenter del modulo VIPER
///    - searchController: The gearing of the bicycle
///    - movies: The handlebar of the bicycle
///    - searchResultMovies: The frame size of the bicycle, in centimeters
///    - restoredState: The frame size of the bicycle, in centimeters
/// - Returns: Regrea un ViewController
final class MoviesViewController: UITableViewController, MoviesViewProtocol {
    /// Indica el tipo de contenido que despliega la pantalla
    var type: (ViewPropertiesProtocol & ApiPathProtocol)?{
        didSet{
            DispatchQueue.main.async { [weak self] in
                self?.title = self?.type?.title
            }
        }
    }
    /// Intancia del Presenter  del modulo VIPER Trending Movies
	var presenter: MoviesPresenterProtocol?
    /// Intancia de un UISearchController  que permite buscar una pelicula en la api de MovieDB
    var searchController: UISearchController?
    /// Intancia de un UITableViewContrller  muestra los resuiltados una pelicula en la api de MovieDB
    var resultsTableController: ResultsTableController?
    /// Arreglo que contiene las peliculas que despliegan en una lista
    var movies: [ListMovieProtocol] = []{
        didSet{
            DispatchQueue.main.async { [weak self] in
                self?.tableView.reloadData()
            }
        }
    }
    /// Arreglo que contiene las peliculas que despliegan en una lista deacuerdo a un criterio de busqueda
    var searchResultMovies: [ListMovieProtocol] = []
    /// Intancia de RestorableStateProtocol que guarda el estado del ResultTableViewController
    var restoredState: RestorableStateProtocol = SearchControllerRestorableState()

    // MARK: ViewController Lifecycle
    
	override func viewDidLoad() {
        super.viewDidLoad()
        resultsTableController = configureTableViewSearch()
        resultsTableController?.delegate = self
        searchController = configureSearch()
        navigationItem.searchController = searchController
        navigationItem.hidesSearchBarWhenScrolling = true
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        presenter?.getMovies()
    }
}

// MARK: - SearchBarController Configuration

extension MoviesViewController{
    ///Metodo que establece la configuracion inicial de SearchBArViewController
    func configureSearch() -> UISearchController{
        guard let resultsTableController = resultsTableController else { return UISearchController() }
        let search = UISearchController(searchResultsController: resultsTableController)
        search.searchResultsUpdater = self
        search.searchBar.autocapitalizationType = .none
        search.searchBar.delegate = self
        return search
    }
    
    func configureTableViewSearch() -> ResultsTableController{
        guard let viewController: ResultsTableController = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "ResultsTableController") as? ResultsTableController else { return ResultsTableController() }
        return viewController
    }
}

// MARK: - View - Presenter Method's

extension MoviesViewController{
    ///Funcion que carga en un arreglo de Movies la informacion que regresa el API de MovieDB y recarga la el UITableView
    /// - Parameters:
    ///     -Movies: Array de ListMovieProtocol
    func loadData(movies: [ListMovieProtocol]) {
        self.movies = movies
    }
    ///Funcion que carga en un arreglo de Movies la informacion que regresa el API de MovieDB de acuerdo a un criterio de busqueda  y recarga la el UITableView
    /// - Parameters:
    ///     -Movies: Array de ListMovieProtocol
    func loadSearchData(movies: [ListMovieProtocol]) {
        self.searchResultMovies = movies
    }
}

// MARK: - TableView's DataSource

extension MoviesViewController {

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        movies.count
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "TrendingTableViewCell", for: indexPath)
        let movie = movies[indexPath.row]
        guard let url = movie.urlImage else { return UITableViewCell() }
        cell.textLabel?.text = movie.title
        cell.detailTextLabel?.text = "\nValoracion: \(movie.voteAverage)â˜…\nPopularidad: \(movie.popularity)ðŸ”¥"
        cell.imageView?.loadRemoteImage(url: url)
        return cell
    }

}

// MARK: - TableView's Delegate

extension MoviesViewController {
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 150.0
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        guard let movie = movies[indexPath.row] as? Movie else { return }
        presenter?.sendToDetail(movie: movie)
    }
}

// MARK: - UISearchBarDelegate

extension MoviesViewController: UISearchBarDelegate {
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
    
    func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
        guard let searchController = searchController else { return }
        updateSearchResults(for: searchController)
    }
    
}
// MARK: - UISearchResultsUpdating

extension MoviesViewController: UISearchResultsUpdating{

    func updateSearchResults(for searchController: UISearchController) {
        presenter?.findMovies(for: searchController.searchBar.text)
    }
}

// MARK: - ResultTableForMoviesDelegate

extension MoviesViewController: ResultTableForMoviesDelegate{
    func didSelectMovie(_ moview: Movie) {
        presenter?.sendToDetail(movie: moview)
    }
}
